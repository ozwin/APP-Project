Index: src/main/java/com/app/project/App.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/app/project/App.java b/src/main/java/com/app/project/App.java
--- a/src/main/java/com/app/project/App.java	
+++ b/src/main/java/com/app/project/App.java	
@@ -47,6 +47,6 @@
         stage.setScene(scene);
         stage.setTitle("OSM Real Estate");
         stage.show();
-
+        System.out.println("The current thread running is : " + Thread.currentThread());
     }
 }
Index: src/main/java/com/app/project/javafxcontroller/RentedUnitsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/app/project/javafxcontroller/RentedUnitsController.java b/src/main/java/com/app/project/javafxcontroller/RentedUnitsController.java
--- a/src/main/java/com/app/project/javafxcontroller/RentedUnitsController.java	
+++ b/src/main/java/com/app/project/javafxcontroller/RentedUnitsController.java	
@@ -4,6 +4,7 @@
 import com.app.project.entity.Property;
 import com.app.project.repository.PropertiesRepository;
 import com.app.project.service.PropertyServices;
+import javafx.application.Platform;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.fxml.FXML;
@@ -36,14 +37,19 @@
         // Retrieve all items from the model and add them to the list
         ArrayList<Property> vacantUnits = (ArrayList<Property>) (ArrayList<?>) propertyServices.findRented();
         rentedUnitsObservableList.addAll(vacantUnits);
-        rentedUnitsListView = new ListView<>(rentedUnitsObservableList);
-        rentedUnitsListView.setCellFactory(param -> new ListCell<Property>() {
-            @Override
-            protected void updateItem(Property item, boolean empty) {
-                super.updateItem(item, empty);
-                setText(item.toString());
-            }
-        });
+        Thread thread = new Thread(() ->{
+            rentedUnitsListView = new ListView<>(rentedUnitsObservableList);
+            Platform.runLater(() ->{
+                rentedUnitsListView.setCellFactory(param -> new ListCell<Property>() {
+                    @Override
+                    protected void updateItem(Property item, boolean empty) {
+                        super.updateItem(item, empty);
+                        setText(item.toString());
+                    }
+                });
+            });
+        }, "Display Rented Units Thread");
+        thread.start();
         App.navigate();
     }
 
